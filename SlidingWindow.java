import java.util.ArrayList;import java.util.Deque;import java.util.LinkedList;import java.util.List;import java.util.Scanner;public class SlidingWindow {    public static void main(String[] args) {        Scanner sc  = new Scanner(System.in);        int n = sc.nextInt();        int k = sc.nextInt(); //window size        int[] arr = new int[n];        for(int i = 0; i < n; i++)            arr[i] = sc.nextInt();//        printMaxInWindow(arr, n, k);        printMax(arr, n, k);    }    public static void printMaxInWindow(int[] arr, int n, int k){        List<Integer> list = new ArrayList<>();        for(int i = 0; i <= n - k; i++){            int max = arr[i];            for(int j = 1; j < k; j++){                max = Math.max(max, arr[j+i]);            }             list.add(max);        }        System.out.println(list);    }    static void printMax(int arr[], int N, int K)    {        Deque<Integer> Qi = new LinkedList<>();        int i;        for (i = 0; i < K; ++i) {            while (!Qi.isEmpty() && arr[i] >= arr[Qi.peekLast()])                Qi.removeLast();            Qi.addLast(i);        }        for (; i < N; ++i) {            System.out.print(arr[Qi.peek()] + " ");            while ((!Qi.isEmpty()) && Qi.peekLast() <= i - K)                Qi.removeFirst();            while ((!Qi.isEmpty())                    && arr[i] >= arr[Qi.peekLast()])                Qi.removeLast();            Qi.addLast(i);        }        System.out.print(arr[Qi.peek()]);    }}