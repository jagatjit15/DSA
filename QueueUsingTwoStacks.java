import java.util.Queue;import java.util.Stack;public class QueueUsingTwoStacks {    Stack<Integer> s1;    Stack<Integer> s2;    public QueueUsingTwoStacks(){        this.s1 = new Stack<>();        this.s2 = new Stack<>();    }    public void enqueue(int x){        while(!s2.isEmpty()){            s1.push(s2.pop());        }        s1.push(x);        while(!s1.isEmpty()){            s2.push(s1.pop());        }    }    public int dequeue(){        if(s2.isEmpty())            return -1;        return s2.pop();    }    public int peek(){        if(s2.isEmpty())            return -1;        return s2.peek();    }    public boolean empty(){        return s2.isEmpty();    }    public int length(){        return s2.size();    }    public static void main(String[] args) {        QueueUsingTwoStacks q = new QueueUsingTwoStacks();        q.enqueue(1);        q.enqueue(2);        q.enqueue(3);        q.enqueue(4);        q.enqueue(5);        q.enqueue(6);        System.out.println(q.peek());        System.out.println(q.length());    }}