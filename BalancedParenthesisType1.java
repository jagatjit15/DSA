import java.util.Scanner;import java.util.Stack;//Using switch case and stackpublic class BalancedParenthesisType1 {    public static boolean balanced(String str){        Stack<Character> st = new Stack<>();        for(int i = 0; i < str.length(); i++){            char par = str.charAt(i);//            if the opening one then push to stack            if(par == '(' || par == '[' || par == '{')                st.push(par);            else{                System.out.println(st);                if(st.isEmpty()) return false;                switch (par){                    case ')': char br1 = st.pop();                        System.out.println(st +" "+1+"  "+br1);                                if(br1 == '{' || br1 =='[')                                    return false;                        break;                    case ']': char br2 = st.pop();                        System.out.println(st +" "+2+ "  " +br2);                              if(br2 == '{' || br2 =='(')                               return false;                    break;                    case '}': char br3 = st.pop();                        System.out.println(st +" "+3+"  "+br3);                              if(br3 == '[' || br3 =='(')                              return false;                              break;                }            }        }        if(st.isEmpty())            return true;        return false;    }    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        String parenthesis = sc.next();        if(balanced(parenthesis))            System.out.println("Balanced");        else            System.out.println("Not balanced");    }}